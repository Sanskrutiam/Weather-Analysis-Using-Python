# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A_C69nhmQr3ZtmXUKPSYgNVNUAap28tB
"""

import pandas as pd

data = pd.read_csv('/content/file.csv')

data.shape

data.head(10)

data.info()

pd.isnull(data).sum()

# Load the CSV f/mnt/data/file.csvile into a DataFrame
file_path = '/content/file.csv'
data = pd.read_csv(file_path)

# Initial inspection of the dataset
print("Initial Data Shape:", data.shape)
print("Columns:", data.columns.tolist())
print("Missing Values (Before Cleaning):")
print(data.isnull().sum())

# 1. Check and remove duplicate rows
duplicates = data.duplicated().sum()
data_cleaned = data.drop_duplicates()

# 2. Handle missing values by replacing with a placeholder
data_cleaned = data_cleaned.fillna("Missing")

# 3. Re-check missing values post-cleaning
print("Missing Values (After Cleaning):")
print(data_cleaned.isnull().sum())

# 4. Display data types
print("Data Types:")
print(data_cleaned.dtypes)

# Summary of the cleaning process
cleaning_summary = {
    "initial_shape": data.shape,
    "final_shape": data_cleaned.shape,
    "duplicates_removed": duplicates
}
print("Cleaning Summary:", cleaning_summary)

# Display a sample of the cleaned data
print("Cleaned Data Sample:")
print(data_cleaned.head())

# 1 distribution of visibility values
import pandas as pd
import matplotlib.pyplot as plt

# Load the cleaned data
file_path = '/content/file.csv'
data = pd.read_csv(file_path)

# Visibility Distribution with Bar Borders
plt.figure(figsize=(10, 6))
plt.hist(data['Visibility_km'], bins=30, color='orange', alpha=0.7, edgecolor='black')
plt.title("Visibility Distribution (km)", fontsize=16)
plt.xlabel("Visibility (km)", fontsize=12)
plt.ylabel("Frequency", fontsize=12)
plt.grid(True)
plt.show()

# 2 relationship between temperature (°C) and pressure (kPa)
import pandas as pd
import plotly.express as px

# Load the cleaned data
file_path = '/content/file.csv'
data = pd.read_csv(file_path)


# Interactive scatter plot using Plotly
fig = px.scatter(
    data,
    x='Temp_C',
    y='Press_kPa',
    title="Pressure vs Temperature",
    labels={"Temp_C": "Temperature (°C)", "Press_kPa": "Pressure (kPa)"},
    color='Temp_C',
    template='plotly',
    size_max=10
)

# Show plot
fig.show()

#  3 Relative Humidity Bar Chart
plt.figure(figsize=(10, 6))
humidity_counts = data['Rel Hum_%'].value_counts().head(10)
plt.bar(humidity_counts.index, humidity_counts.values, color='green')
plt.title("Most Common Relative Humidity Levels", fontsize=16)
plt.xlabel("Relative Humidity (%)", fontsize=12)
plt.ylabel("Frequency", fontsize=12)
plt.grid(True)
plt.show()

# 4  Wind Speed by Top Weather Conditions
top_weather = data['Weather'].value_counts().head(5).index
filtered_data = data[data['Weather'].isin(top_weather)]

plt.figure(figsize=(12, 6))
filtered_data.boxplot(column='Wind Speed_km/h', by='Weather', grid=False, vert=False, patch_artist=True)
plt.title("Wind Speed Distribution by Top 5 Weather Conditions", fontsize=16)
plt.xlabel("Wind Speed (km/h)", fontsize=12)
plt.ylabel("Weather Conditions", fontsize=12)
plt.suptitle("")  # Remove the automatic title
plt.grid(True)
plt.show()

# 5  temperature over time
import plotly.express as px

fig = px.line(data, x='Date/Time', y='Temp_C', title='Temperature Over Time',
              labels={'Temp_C': 'Temperature (°C)', 'Date/Time': 'Date/Time'})
fig.update_traces(line_color='red')
fig.show()

#6 Find all the unique 'wind speed' values
import matplotlib.pyplot as plt

# Extract unique wind speed values and their counts
unique_wind_speeds = data['Wind Speed_km/h'].value_counts().sort_index()

# Create a bar chart to visualize the unique wind speed values and their frequency
plt.figure(figsize=(10, 6))
unique_wind_speeds.plot(kind='bar', color='skyblue', edgecolor='black')
plt.title('Frequency of Unique Wind Speed Values', fontsize=14)
plt.xlabel('Wind Speed (km/h)', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()

# Display the plot
plt.show()

# 7 find the number of times when the 'weather is exactly clear

# Parse "Date/Time" column with a more robust approach for mixed formats
clear_weather_data['Date/Time'] = pd.to_datetime(clear_weather_data['Date/Time'], format='mixed', errors='coerce')

# Remove any rows where parsing failed (NaT values)
clear_weather_data = clear_weather_data.dropna(subset=['Date/Time'])

# Group by date and count the occurrences of "Clear" weather
clear_weather_counts_by_date = clear_weather_data.groupby(clear_weather_data['Date/Time'].dt.date).size()

# Visualize the time distribution of clear weather occurrences
plt.figure(figsize=(10, 6))
clear_weather_counts_by_date.plot(
    kind='line', color='blue', marker='o', label='Clear Weather'
)
plt.title('Occurrences of Clear Weather Over Time', fontsize=14)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Number of Occurrences', fontsize=12)
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.legend()
plt.tight_layout()

# Display the final count and the corrected plot
clear_weather_count, plt.show()

#9 Occurrences of 4 km/h Wind Speed
import pandas as pd
import matplotlib.pyplot as plt

# Load the uploaded data
data = pd.read_csv('/content/file.csv')

# Filter for rows where wind speed is exactly 4 km/h
wind_speed_4_data = data[data['Wind Speed_km/h'] == 4]

# Count occurrences grouped by date (if needed)
wind_speed_4_data['Date/Time'] = pd.to_datetime(wind_speed_4_data['Date/Time'], errors='coerce')
wind_speed_4_counts = wind_speed_4_data.groupby(wind_speed_4_data['Date/Time'].dt.date).size()

# Create a visualization
plt.figure(figsize=(10, 6))
plt.bar(wind_speed_4_counts.index, wind_speed_4_counts.values, color='blue', edgecolor='black')
plt.title('Occurrences of 4 km/h Wind Speed', fontsize=14)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Occurrences', fontsize=12)
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

-# 12  Interactive Scatter Plot: Wind Speed vs Visibility

fig = px.scatter(data, x='Wind Speed_km/h', y='Visibility_km', color='Wind Speed_km/h',
                 title='Wind Speed vs Visibility',
                 labels={'Wind Speed_km/h': 'Wind Speed (km/h)', 'Visibility_km': 'Visibility (km)'})
fig.show()

#13   interactive Temperature vs Dew Point Temperature

fig = px.scatter(data, x='Temp_C', y='Dew Point Temp_C', color='Temp_C', size='Rel Hum_%',
                 title='Temperature vs Dew Point Temperature',
                 labels={'Temp_C': 'Temperature (°C)', 'Dew Point Temp_C': 'Dew Point Temperature (°C)'})
fig.show()

# 14  Interactive Weather Condition Counts
weather_counts = data['Weather'].value_counts().reset_index()
weather_counts.columns = ['Weather', 'Count']

fig = px.bar(weather_counts.head(10), x='Weather', y='Count', color='Count',
             title='Top 10 Weather Conditions')
fig.show()

# 15 Interactive Pressure Over Time

fig = px.line(data, x='Date/Time', y='Press_kPa', title='Pressure Over Time',
              labels={'Press_kPa': 'Pressure (kPa)', 'Date/Time': 'Date/Time'})
fig.update_traces(line_color='purple')
fig.show()

# 16 Interactive Monthly Average Temperature

data['Date/Time'] = pd.to_datetime(data['Date/Time'], errors='coerce')

# Drop rows where 'Date/Time' conversion failed
data = data.dropna(subset=['Date/Time'])

# Calculate monthly average temperature
monthly_avg_temp = data.groupby(data['Date/Time'].dt.month)['Temp_C'].mean().reset_index()
monthly_avg_temp.columns = ['Month', 'Avg_Temperature']

# Create the interactive bar chart
fig = px.bar(monthly_avg_temp, x='Month', y='Avg_Temperature', color='Avg_Temperature',
             title='Monthly Average Temperature',
             labels={'Month': 'Month', 'Avg_Temperature': 'Average Temperature (°C)'})
fig.show()

#  17  Interactive Heatmap of Correlations

import plotly.figure_factory as ff

correlation = data[['Temp_C', 'Dew Point Temp_C', 'Rel Hum_%',
                    'Wind Speed_km/h', 'Visibility_km', 'Press_kPa']].corr()

fig = ff.create_annotated_heatmap(
    z=correlation.values,
    x=list(correlation.columns),
    y=list(correlation.columns),
    colorscale='Viridis'
)
fig.update_layout(title_text='Correlation Heatmap', title_x=0.5)
fig.show()

#  19 Interactive Hourly Temperature Boxplot

data['Hour'] = data['Date/Time'].dt.hour

fig = px.box(data, x='Hour', y='Temp_C', color='Hour',
             title='Hourly Temperature Variation',
             labels={'Hour': 'Hour of the Day', 'Temp_C': 'Temperature (°C)'})
fig.show()